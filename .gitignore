# Ignorar arquivos de banco de dados
*.sql

# Ignorar arquivos temporários
*.log
*.tmp

# Ignorar arquivos de backup
*.bak
*.sql~

# Ignorar pastas de IDEs
.vscode/
.idea/
*.swp

Claro! Vou fornecer um exemplo de cada um dos documentos solicitados: um README, um `.gitignore` e um enunciado para o projeto.

### README.md

```markdown
# Sistema de Biblioteca

Este projeto implementa um sistema básico de gerenciamento de biblioteca utilizando SQL. O sistema permite a criação e manutenção de informações sobre autores, livros e empréstimos de livros.

## Estrutura do Banco de Dados

O banco de dados é composto por três tabelas principais:

1. **Autores**
   - `AutorID`: Identificador único do autor (chave primária).
   - `Nome`: Nome do autor.
   - `Nacionalidade`: Nacionalidade do autor.

2. **Livros**
   - `LivroID`: Identificador único do livro (chave primária).
   - `Titulo`: Título do livro.
   - `AutorID`: Identificador do autor (chave estrangeira).
   - `AnoPublicacao`: Ano de publicação do livro.
   - `Genero`: Gênero do livro.

3. **Emprestimos**
   - `EmprestimoID`: Identificador único do empréstimo (chave primária).
   - `LivroID`: Identificador do livro emprestado (chave estrangeira).
   - `DataEmprestimo`: Data do empréstimo.
   - `DataDevolucao`: Data de devolução (pode ser NULL se o livro ainda estiver emprestado).
   - `NomeUsuario`: Nome do usuário que fez o empréstimo.

## Instruções

### Criação do Banco de Dados

1. **Crie o banco de dados e as tabelas:**

    ```sql
    DROP DATABASE IF EXISTS Biblioteca;
    SET SQL_SAFE_UPDATES = 0;
    CREATE DATABASE Biblioteca;
    USE Biblioteca;
    
    -- Criação das tabelas
    CREATE TABLE Autores (
        AutorID INT AUTO_INCREMENT PRIMARY KEY,
        Nome VARCHAR(100) NOT NULL,
        Nacionalidade VARCHAR(100)
    );
    
    CREATE TABLE Livros (
        LivroID INT AUTO_INCREMENT PRIMARY KEY,
        Titulo VARCHAR(255) NOT NULL,
        AutorID INT,
        AnoPublicacao YEAR,
        Genero VARCHAR(50),
        FOREIGN KEY (AutorID) REFERENCES Autores(AutorID)
    );
    
    CREATE TABLE Emprestimos (
        EmprestimoID INT AUTO_INCREMENT PRIMARY KEY,
        LivroID INT,
        DataEmprestimo DATE NOT NULL,
        DataDevolucao DATE,
        NomeUsuario VARCHAR(100) NOT NULL,
        FOREIGN KEY (LivroID) REFERENCES Livros(LivroID)
    );
    ```

2. **Insira os dados iniciais:**

    ```sql
    -- Inserção de dados
    INSERT INTO Autores (Nome, Nacionalidade) VALUES
    ('Gabriel Garcia Marquez', 'Colombiano'),
    ('J.K. Rowling', 'Britânica'),
    ('George Orwell', 'Britânico'),
    ('Margaret Atwood', 'Canadense'),
    ('Harper Lee', 'Americana');
    
    INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES 
    ('Cem Anos de Solidão', 1, 1967, 'Ficção'),
    ('Harry Potter e a Pedra Filosofal', 2, 1997, 'Fantasia'),
    ('1984', 3, 1949, 'Distopia'),
    ('O Conto da Aia', 4, 1985, 'Distopia'),
    ('O Sol é Para Todos', 5, 1960, 'Drama'),
    ('A Menina que Roubava Livros', 2, 2005, 'Ficção Histórica'),
    ('O Código Da Vinci', 2, 2003, 'Suspense'),
    ('O Hobbit', 2, 1937, 'Fantasia'),
    ('Matar um Mockingbird', 5, 1960, 'Drama'),
    ('O Grande Gatsby', 5, 1925, 'Romance');
    
    INSERT INTO Emprestimos (LivroID, DataEmprestimo, DataDevolucao, NomeUsuario) VALUES 
    (1, '2024-08-01', NULL, 'João Silva'),
    (2, '2024-08-10', '2024-08-20', 'Maria Oliveira'),
    (3, '2024-08-15', NULL, 'Carlos Santos'),
    (4, '2024-08-05', '2024-08-25', 'Ana Paula'),
    (5, '2024-08-18', NULL, 'Roberto Lima');
    ```

### Consultas e Atualizações

Para consultar os dados ou atualizar informações, você pode executar as seguintes consultas:

- Listar todos os livros com os nomes de seus autores:

    ```sql
    SELECT Livros.Titulo, Autores.Nome AS Autor, Livros.AnoPublicacao
    FROM Livros
    JOIN Autores ON Livros.AutorID = Autores.AutorID;
    ```

- Listar os empréstimos que ainda estão em aberto:

    ```sql
    SELECT Emprestimos.EmprestimoID, Livros.Titulo, Emprestimos.DataEmprestimo, Emprestimos.NomeUsuario
    FROM Emprestimos
    JOIN Livros ON Emprestimos.LivroID = Livros.LivroID
    WHERE Emprestimos.DataDevolucao IS NULL;
    ```

- Atualizar a data de devolução de um empréstimo específico:

    ```sql
    UPDATE Emprestimos
    SET DataDevolucao = '2024-08-22'
    WHERE EmprestimoID = 1;
    ```

- Remover um livro e os registros de empréstimos associados:

    ```sql
    -- Remover empréstimos associados
    DELETE FROM Emprestimos
    WHERE LivroID = 1;
    
    -- Remover o livro
    DELETE FROM Livros
    WHERE LivroID = 1;
    ```

## Contribuição

Se você deseja contribuir para este projeto, sinta-se à vontade para enviar um pull request. Para alterações maiores, por favor, abra uma issue para discussão.

## Licença

Este projeto está licenciado sob a [Licença MIT](LICENSE).

```

### .gitignore

Crie um arquivo `.gitignore` para garantir que arquivos desnecessários não sejam incluídos no repositório. Para um projeto SQL, você pode incluir o seguinte:

```
# Ignorar arquivos de banco de dados
*.sql

# Ignorar arquivos temporários
*.log
*.tmp

# Ignorar arquivos de backup
*.bak
*.sql~

# Ignorar pastas de IDEs
.vscode/
.idea/
*.swp
```

### Enunciado do Projeto

**Enunciado: Sistema de Gerenciamento de Biblioteca**

**Descrição:**

Este projeto visa desenvolver um sistema básico de gerenciamento de biblioteca para organizar informações sobre autores, livros e empréstimos. O sistema deve permitir a criação de um banco de dados com três tabelas principais: `Autores`, `Livros`, e `Emprestimos`. As funcionalidades básicas incluem a inserção de dados, a execução de consultas para listar livros e empréstimos, e a atualização ou remoção de registros.

**Funcionalidades Requeridas:**

1. **Criação de Banco de Dados e Tabelas:**
   - Criação do banco de dados `Biblioteca`.
   - Criação das tabelas `Autores`, `Livros`, e `Emprestimos` com os respectivos campos e chaves primárias/estrangeiras.

2. **Inserção de Dados:**
   - Inserção de dados fictícios nas tabelas `Autores`, `Livros`, e `Emprestimos`.

3. **Consultas SQL:**
   - Listar todos os livros com os nomes de seus autores.
   - Listar os empréstimos que ainda estão em aberto.

4. **Atualizações e Exclusões:**
   - Atualizar a data de devolução de um empréstimo específico.
   - Remover um livro e os registros de empréstimos associados a ele.

**Tecnologias Utilizadas:**

- SQL (MySQL ou MariaDB)

**Objetivo:**

O objetivo deste projeto é proporcionar uma base para um sistema de biblioteca, demonstrando a criação de tabelas, inserção e manipulação de dados em um banco de dados relacional. Este projeto pode ser expandido com funcionalidades adicionais, como gerenciamento de usuários, reservas de livros, e relatórios avançados.

